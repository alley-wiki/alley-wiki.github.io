import { Metadata } from "next";
import { readdirSync } from "fs";
import { readFile } from "fs/promises";
import path from "path";
import Link from "next/link";

export const metadata: Metadata = {
  title: "–°–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞ | –í–∏—à–Ω–µ–≤—ã–µ –ê–ª–ª–µ–∏",
};

interface EventInfo {
  title: string;
  slug: string;
  preview: string;
}

/**
 * –ò—â–µ–º –ø–µ—Ä–≤—É—é ¬´–∂–∏–≤—É—é¬ª —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é, –ø—Ä–æ–ø—É—Å–∫–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
 * - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
 * - # (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
 * - == (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫)
 * - {{–°–æ–±—ã—Ç–∏–µ_—Å–µ—Ä–≤–µ—Ä–∞...
 * - –ù–∞—á–∞–ª–æ: / –ö–æ–Ω–µ—Ü:
 */
function extractPreviewLine(lines: string[]): string {
  for (const line of lines) {
    const trimmed = line.trim();
    if (!trimmed) continue;
    if (trimmed.startsWith("#")) continue;
    if (trimmed.startsWith("==")) continue;
    if (trimmed.startsWith("{{–°–æ–±—ã—Ç–∏–µ_—Å–µ—Ä–≤–µ—Ä–∞")) continue;
    if (trimmed.startsWith("–ù–∞—á–∞–ª–æ:")) continue;
    if (trimmed.startsWith("–ö–æ–Ω–µ—Ü:")) continue;
    return trimmed; // –ü–µ—Ä–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
  }
  return "";
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É (–∏–ª–∏ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ) –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
 * –ó–¥–µ—Å—å ‚Äî –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
 */
function capitalizeTitle(rawTitle: string): string {
  return rawTitle
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
}

/**
 * –ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω .md-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:
 * - title (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º)
 * - slug (–∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ .md)
 * - preview (–ø–µ—Ä–≤–∞—è ¬´–∂–∏–≤–∞—è¬ª —Å—Ç—Ä–æ–∫–∞)
 */
async function parseEventFile(filePath: string): Promise<EventInfo | null> {
  try {
    const content = await readFile(filePath, "utf-8");
    const lines = content.split("\n");
    const slug = path.basename(filePath, ".md");

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "# ..."
    const titleMatch = content.match(/^# (.*)/);
    const rawTitle = titleMatch ? titleMatch[1].trim() : slug;
    // –î–µ–ª–∞–µ–º –∑–∞–≥–ª–∞–≤–Ω–æ–π –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    const title = capitalizeTitle(rawTitle);

    // –ò—â–µ–º ¬´–ø—Ä–µ–≤—å—é¬ª
    const preview = extractPreviewLine(lines);

    return {
      title,
      slug,
      preview,
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ —Å–æ–±—ã—Ç–∏—è ${filePath}:`, error);
    return null;
  }
}

export default async function EventsPage() {
  const eventsDir = path.join(process.cwd(), "public", "events");
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .md
  const files = readdirSync(eventsDir).filter((file) => file.endsWith(".md"));

  // –ü–∞—Ä—Å–∏–º –∏—Ö
  const eventsPromises = files.map((file) =>
    parseEventFile(path.join(eventsDir, file))
  );
  const eventsArray = await Promise.all(eventsPromises);
  // –§–∏–ª—å—Ç—Ä—É–µ–º null
  const events = eventsArray.filter((event): event is EventInfo => event !== null);

  return (
    <div className="w-full max-w-7xl mx-auto px-4 py-8">
      <h1 className="text-3xl sm:text-4xl font-bold mb-4 text-center bg-gradient-to-r from-pink-500 to-purple-500 bg-clip-text text-transparent">
        üéâ –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞
      </h1>
      <p className="text-center text-muted-foreground mb-6">
        –í—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –í–∏—à–Ω–µ–≤—ã–µ –ê–ª–ª–µ–∏
      </p>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {events.map((event) => (
          <Link
            key={event.slug}
            href={`/wiki/events/${encodeURIComponent(event.slug)}`}
            className="block group"
          >
            <div className="p-4 rounded-lg border bg-card shadow hover:shadow-lg transition-shadow">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—É–∂–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω) */}
              <h2 className="text-lg sm:text-xl font-semibold mb-2 bg-gradient-to-r from-pink-500 to-purple-500 bg-clip-text text-transparent">
                {event.title}
              </h2>
              {/* –ü—Ä–µ–≤—å—é (–±–µ–∑ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–æ–∫) */}
              <p className="text-sm text-foreground/80 line-clamp-2">
                {event.preview}
              </p>
              <div className="mt-3 text-sm text-pink-500 group-hover:underline">
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
              </div>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
}
